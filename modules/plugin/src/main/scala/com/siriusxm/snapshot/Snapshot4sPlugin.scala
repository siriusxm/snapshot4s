/*
 * Copyright 2024 SiriusXM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package snapshot4s

import sbt.*
import sbt.Keys.*
import sbt.util.Logger

object Snapshot4sPlugin extends AutoPlugin {

  object autoImport {
    val snapshot4sResourceDirectory =
      settingKey[File]("The directory in which snapshot4s snapshot files are stored.")
    val snapshot4sDirectory =
      settingKey[File]("The directory in which snapshot4s results are stored prior to promotion.")
    val snapshot4sSourceGenerator =
      taskKey[Seq[File]]("Generate source files for snapshot4s testing.")
    val snapshot4sPromote = taskKey[Unit]("Update failing snapshot4s snapshot files.")
  }

  import autoImport.*

  override def projectSettings: Seq[Setting[?]] = Seq(
    snapshot4sDirectory         := (Test / target).value / "snapshot",
    snapshot4sResourceDirectory := (Test / resourceDirectory).value / "snapshot",
    snapshot4sSourceGenerator := {
      val text = s"""package snapshot4s

/** This object was generated by sbt-snapshot4s. */
object generated {
  implicit val snapshotConfig: SnapshotConfig = new SnapshotConfig(
    resourceDirectory = Path("${snapshot4sResourceDirectory.value}"),
    outputDirectory = Path("${snapshot4sDirectory.value}"),
    sourceDirectory = Path("${(Test / sourceDirectory).value}")
  )
}
 """
      val snapshot4s = (Test / sourceManaged).value / "Snapshot4sBuildInfo.scala"
      IO.write(snapshot4s, text)
      Seq(snapshot4s)
    },
    Test / sourceGenerators += snapshot4sSourceGenerator.taskValue,
    Test / scalacOptions ++= {
      if (scalaVersion.value.startsWith("3.")) {
        Nil
      } else {
        Seq(
          "-Yrangepos" // makes the compiler collect position metadata
        )
      }
    },
    snapshot4sPromote := {
      val log = streams.value.log
      applyResourcePatches(log)(
        snapshot4sDirectory.value / "resource-patch",
        snapshot4sResourceDirectory.value
      )
      applyInlinePatches(log)(
        snapshot4sDirectory.value / "inline-patch",
        (Test / sourceDirectory).value
      )
    },
    libraryDependencies ++= Seq(
      "com.siriusxm" %% "snapshot4s-core" % BuildInfo.snapshot4sVersion % Test
    )
  )

  private def applyResourcePatches(log: Logger)(resourcePatchDir: File, resourceDir: File) = {
    val patches = (resourcePatchDir ** (-DirectoryFilter)).get
    patches.foreach { patchFile =>
      val patchContents      = IO.read(patchFile)
      val relativeSourceFile = IO.relativize(resourcePatchDir, patchFile).get
      val sourceFile         = resourceDir / relativeSourceFile
      IO.delete(patchFile)
      IO.write(sourceFile, patchContents)
      log.info(s"Patch applied to $sourceFile")
    }
  }

  private def applyInlinePatches(log: Logger)(inlinePatchDir: File, sourceDir: File) = {
    val allChangeFiles = (inlinePatchDir ** (-DirectoryFilter)).get

    allChangeFiles.groupBy(_.getParent).foreach { case (parentDir, changeFiles) =>
      val relativeSourceFile = IO.relativize(inlinePatchDir, new File(parentDir)).get
      val sourceFile         = sourceDir / relativeSourceFile
      val sourceContents     = IO.read(sourceFile)

      val sourceFileHash = Hashing.calculateHash(sourceContents)

      val changes = changeFiles.toList.mapFilter { changeFile =>
        val (start, end) = parseChangeFileName(changeFile.getName)
        val contents     = IO.read(changeFile)

        Hashing.verifyAndRemoveHash(sourceFileHash)(contents) match {
          case None =>
            log.warn(
              s"Can't apply patch to $relativeSourceFile, most likely it was modified after executing tests. " +
                s"Please re-run the test and try again."
            )
            None
          case Some(patchContent) => Some((start, end, patchContent))
        }
      }.toList

      changes match {
        case Nil => ()
        case nonEmptyList =>
          val patchedSource = applyPatch(sourceContents, nonEmptyList)
          IO.write(sourceFile, patchedSource)
          log.info(s"Patch applied to $sourceFile")
          changeFiles.foreach(IO.delete)
      }
    }

  }

  private def parseChangeFileName(str: String): (Int, Int) = {
    str.split("-").toList match {
      case startPos :: endPos :: Nil => (startPos.toInt, endPos.toInt)
      case _ =>
        sys.error(
          s"Unable to parse change file name ${str}. There is a bug in the sxm-snapshot4s-plugin."
        )
    }
  }

  private def applyPatch(source: String, patches: List[(Int, Int, String)]): String = {
    patches
      .sortBy(_._1)
      .foldLeft((source, 0))((acc, patch) => {
        val (source, offset)           = acc
        val (startPos, endPos, middle) = patch
        val start                      = source.take(offset + startPos)
        val end                        = source.drop(offset + endPos)
        val nextSource                 = start ++ middle ++ end
        val lengthIncrease             = middle.length - (endPos - startPos)
        val nextOffset                 = offset + lengthIncrease
        (nextSource, nextOffset)
      })
      ._1
  }

  private implicit class MapFilter[A](list: List[A]) {
    def mapFilter[B](f: A => Option[B]): List[B] =
      list.map(f).filter(_.isDefined).map(_.get)
  }

}
